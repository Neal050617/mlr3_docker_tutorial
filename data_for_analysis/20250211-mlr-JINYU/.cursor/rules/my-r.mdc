---
description: R语言开发规范和最佳实践指南
globs: *.R,*.Rmd,*.qmd
---
# R语言开发规范和最佳实践

核心专长:
- R语言开发
- 项目架构设计 
- 机器学习工程
- 数据分析流程
- 模型评估与验证
- 代码质量控制
- 包管理

开发指南:

1. 项目结构
必做:
- 使用标准R包结构
- 实现模块化设计
- 遵循R语言规范
- 使用proper配置管理
- 维护完整文档

禁止:
- 混淆包的边界
- 忽略项目结构
- 违反R语言规范
- 使用扁平结构

2. 机器学习工作流
必做:
- 使用mlr3生态系统
- 实现标准化的数据预处理
- 使用proper交叉验证
- 执行模型调优
- 进行特征工程
- 评估模型性能
- 可重现性保证

禁止:
- 跳过数据验证
- 忽略交叉验证
- 泄露测试数据
- 过度拟合模型

3. 数据预处理
必做:
- 检查缺失值
- 标准化/归一化
- 处理异常值
- 特征选择
- 数据分割验证

禁止:
- 使用未经处理的原始数据
- 忽略数据质量
- 混合训练测试数据
- 跳过数据验证

4. 模型评估
必做:
- 使用多个评估指标
- 实现交叉验证
- 生成性能报告
- 可视化评估结果
- 模型解释性分析

禁止:
- 单一评估指标
- 忽略模型验证
- 跳过性能报告
- 忽略模型解释

5. 代码组织
必做:
- 使用合理的导入语句
- 实现清晰的架构
- 遵循函数式编程原则
- 使用roxygen2文档
- 编写规范注释

禁止:
- 产生循环依赖
- 混淆职责边界
- 跳过文档注释
- 忽略代码组织

6. 依赖管理
必做:
- 使用renv管理环境
- 明确依赖版本
- 使用DESCRIPTION文件
- 区分开发依赖
- 定期更新包

禁止:
- 混用不同环境
- 依赖全局包
- 忽略版本控制
- 忽略安全更新

7. 测试策略
必做:
- 使用testthat框架
- 实现单元测试
- 使用测试夹具
- 测试边界情况
- 监控测试覆盖率

禁止:
- 跳过测试文档
- 混合测试类型
- 忽略测试隔离
- 忽略错误场景

代码质量:
- 使用lintr检查
- 使用styler格式化 
- 遵循tidyverse风格
- 使用静态分析
- 监控代码复杂度

文档:
- 编写roxygen2注释
- 维护README
- 文档化API
- 包含示例代码
- 保持文档更新

开发工具:
- RStudio/VSCode IDE
- mlr3生态系统
- tidyverse工具链
- 版本控制
- 模型评估工具

最佳实践:
- 遵循tidyverse原则
- 保持代码整洁
- 合理处理错误
- 使用proper日志
- 实现监控机制

机器学习最佳实践:
- 使用管道操作
- 实现模型复用
- 特征工程规范
- 超参数优化
- 模型集成策略
- 结果可视化
- 性能评估报告

可重现性保证:
- 设置随机种子
- 记录环境配置
- 版本控制
- 参数记录
- 结果复现验证

包分发:
- 使用devtools打包
- 处理版本管理
- 编写DESCRIPTION
- 包含元数据
- 文档化安装过程

注意事项:
- 注重可维护性
- 保持代码组织
- 妥善处理错误
- 完整的文档工作
