## 1. 先拉取一个镜像

```{shell}
docker pull docker.1ms.run/rocker/rstudio:latest
# 如果能连接外网的话
docker pull rocker/rstudio:latest

# 删除所有已经退出的容器
docker ps -a -f status=exited -q | xargs docker rm


## 启用端口和配置防火墙
# 检测操作系统类型
OS_TYPE=$(uname -s)

case "$OS_TYPE" in
    # macOS系统
    "Darwin")
        echo "检测到 macOS 系统"
        # 检查端口占用
        lsof -i :7878 || echo "端口 7878 可用"
        # 检查防火墙状态
        /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate
        echo "macOS 通常不需要额外的防火墙配置，如果需要，请在系统偏好设置中配置"
        ;;
    
    # Linux系统
    "Linux")
        echo "检测到 Linux 系统"
        # 检查是否安装了firewall-cmd
        if command -v firewall-cmd >/dev/null 2>&1; then
            echo "配置 firewalld..."
            sudo firewall-cmd --zone=public --add-port=7878/tcp --permanent
            sudo firewall-cmd --reload
        else
            echo "未检测到 firewalld，如果需要配置防火墙，请安装或使用其他防火墙工具"
        fi
        ;;
    
    # 其他系统
    *)
        echo "未识别的操作系统: $OS_TYPE"
        echo "请手动配置防火墙和端口设置"
        ;;
esac

```
## 2. 创建一个docker镜像
```{shell}
# 创建 Dockerfile
cat << 'EOF' > Dockerfile
FROM docker.1ms.run/rocker/rstudio:latest

# 定义构建参数
ARG GROUPID
ARG GROUPNAME
ARG USERNAME
ARG USERID
ARG PASSWORD
ARG ROOT_PASSWORD

# 使用清华镜像源替换默认源（Ubuntu 24.04 Noble）
RUN echo '\
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble main restricted universe multiverse\n\
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-updates main restricted universe multiverse\n\
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-backports main restricted universe multiverse\n\
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-security main restricted universe multiverse\n\
' > /etc/apt/sources.list

# 更新软件包并安装系统依赖
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    libxml2-dev \
    libcurl4-openssl-dev \
    libglpk-dev \
    libnetcdf-dev \
    libssl-dev \
    zlib1g-dev \
    libpng-dev \
    libjpeg-dev \
    libtiff-dev \
    libgsl0-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 设置 RUSTUP_DIST_SERVER 和 RUSTUP_UPDATE_ROOT 环境变量
ENV RUSTUP_DIST_SERVER="https://mirrors.ustc.edu.cn/rust-static" \
    RUSTUP_UPDATE_ROOT="https://mirrors.ustc.edu.cn/rust-static/rustup"

# 安装 Rustup 和 Cargo
RUN curl --proto '=https' --tlsv1.2 -sSf https://mirrors.ustc.edu.cn/rust-static/rustup/rustup-init.sh | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# 配置 Cargo 使用中科大镜像源
RUN mkdir -p ~/.cargo && \
    echo '[source.crates-io]' > ~/.cargo/config && \
    echo 'registry = "https://github.com/rust-lang/crates.io-index"' >> ~/.cargo/config && \
    echo 'replace-with = "ustc"' >> ~/.cargo/config && \
    echo '[source.ustc]' >> ~/.cargo/config && \
    echo 'registry = "git://mirrors.ustc.edu.cn/crates.io-index"' >> ~/.cargo/config

# 账户管理（简化版）
RUN mkdir -p /etc/sudoers.d

# 用户创建和权限设置将在容器启动时动态完成
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/init"]
EOF

docker build \
  --build-arg USERNAME=$(whoami) \
  --build-arg USERID=$(id -u) \
  --build-arg GROUPID=$(id -g) \
  --build-arg GROUPNAME=$(id -gn) \
  --build-arg PASSWORD=MoBio888 \
  --build-arg ROOT_PASSWORD=MoBio888 \
  -t mobior .

# 检查端口是否被占用（通用命令）
if command -v lsof >/dev/null 2>&1; then
    lsof -i :7878 || echo "端口 7878 可用"
elif command -v netstat >/dev/null 2>&1; then
    netstat -an | grep 7878 || echo "端口 7878 可用"
else
    echo "无法检查端口状态，请确保端口 7878 未被占用"
fi

# R包挂载过来了，这样包就不用重复安装了
# 其他路径自己挂载哈，尤其是kegg背景数据
docker run -itd -p 7878:8787 --name rstudio_test \
  -e DISABLE_AUTH=false \
  -e HOST_UID=$(id -u) \
  -e HOST_GID=$(id -g) \
  -e HOST_USER=$(whoami) \
  -e HOST_GROUP=$(id -gn) \
  -e USERID=$(id -u) \
  -e GROUPID=$(id -g) \
  -e USERNAME=$(whoami) \
  -e GROUPNAME=$(id -gn) \
  -e PASSWORD=MoBio888 \
  -e ROOT=TRUE \
  -e ROOT_PASSWORD=MoBio888 \
  -v /Users/colinliu/Desktop/20250211-mlr3/R_package_mobio/site-library:/usr/local/lib/R/site-library/ \
  -v "$(pwd)":/home/$(whoami)/analysis/ \
  mobior

docker exec -it rstudio_test bash
docker exec -it -u chaoliu rstudio2_test bash -c "cd /home/$(whoami)/analysis_metabo && bash"
docker exec -it -u USERID=$(id -u) -e GROUPID=$(id -g) rstudio2_test bash -c "cd /home/$(whoami)/analysis_metabo && bash"
```

```{R}
# rust和cargo需要安装，否则clarabel和CVXR包安装不了

getOption("repos")
options(repos=structure(c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")))
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")

# List of packages that we need from cran and bioc 
cran_pkg <- c("BiocManager", "bookdown", "dplyr", "ecodist", "ggplot2", 
              "gridExtra", "kableExtra", "knitr", "scales", "vegan")
bioc_pkg <- c("ANCOMBC", "ape", "DESeq2",  "DirichletMultinomial", "mia", "miaViz")

# Gets those packages that are already installed
cran_pkg_already_installed <- cran_pkg[ cran_pkg %in% installed.packages() ]
bioc_pkg_already_installed <- bioc_pkg[ bioc_pkg %in% installed.packages() ]

# Gets those packages that need to be installed
cran_pkg_to_be_installed <- setdiff(cran_pkg, cran_pkg_already_installed)
bioc_pkg_to_be_installed <- setdiff(bioc_pkg, bioc_pkg_already_installed)

# If there are packages that need to be installed, installs them from CRAN
if( length(cran_pkg_to_be_installed) ) {
   install.packages(cran_pkg_to_be_installed)
}
# If there are packages that need to be installed, installs them from Bioconductor
if( length(bioc_pkg_to_be_installed) ) {
   BiocManager::install(bioc_pkg_to_be_installed, ask = F)
}

# Reorders bioc packages, so that mia and miaViz are first
bioc_pkg <- c(bioc_pkg[ bioc_pkg %in% c("mia", "miaViz") ], 
              bioc_pkg[ !bioc_pkg %in% c("mia", "miaViz") ] ) 

# Loading all packages into session. Returns true if package was successfully loaded.
loaded <- sapply(c(bioc_pkg, cran_pkg), require, character.only = TRUE)
as.data.frame(loaded)

# 清华源可能没有最新的ANCOMBC，用默认镜像源成功了；
BiocManager::install("ANCOMBC", 
                     configure.args = "--install-tests",
                     repos = structure(c(Bioc = "https://bioconductor.org/packages/3.19/bioc/src/contrib")),
                     type = "source")
BiocManager::install("biomformat")

```